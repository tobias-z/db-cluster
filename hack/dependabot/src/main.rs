use glob::glob;
use serde_yaml::Value;

use clap::{Parser, Subcommand};

// TODO: Ensure that we have good messages

/// DBServer help about message
#[derive(Parser, Debug)]
#[command(author, version, about)]
pub struct Args {
    #[command(subcommand)]
    pub command: Command,
}

#[derive(Subcommand, Debug)]
pub enum Command {
    Check,
    Create,
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args = Args::parse();
    match args.command {
        Command::Check => check_config(),
        Command::Create => create_config(),
    }
    Ok(())
}

fn check_config() {
    let new_config = get_new_config();
    let old_config = match std::fs::read_to_string("./.github/dependabot.yml") {
        Ok(curr_config) => curr_config,
        Err(_) => "".to_string(),
    };
    if new_config.unwrap() != old_config {
        eprintln!(
            "The dependabot config is not up to date. Please run 'dependabot create' to update it."
        );
        std::process::exit(1);
    }
}

fn create_config() {
    let new_config = get_new_config();
    if let Err(err) = std::fs::write("./.github/dependabot.yml", new_config.unwrap()) {
        eprintln!("Error: {}", err);
        std::process::exit(1);
    }
}

fn get_new_config() -> Result<String, Box<dyn std::error::Error>> {
    let template = std::fs::read_to_string("./.github/dependabot.template.yml")?;
    let mut template = serde_yaml::from_str::<Value>(&template)
        .expect("You have an error in your ./.github/dependabot.template.yml");
    let updates = template.get("updates").unwrap();
    let mut final_updates: Vec<Value> = vec![];
    for update in updates.as_sequence().unwrap() {
        match update.get("directory") {
            Some(directory) => {
                let pattern = directory.as_str().unwrap_or_else(|| {
                    panic!(
                        "Expected field 'directory' to be a string, but found: {:?}",
                        directory
                    )
                });
                for dir in get_updates(pattern) {
                    let mut new_update = update.clone();
                    new_update["directory"] = dir.into();
                    final_updates.push(new_update)
                }
            }
            None => {
                final_updates.push(update.clone());
            }
        }
    }
    template["updates"] = final_updates.into();
    let new_config = serde_yaml::to_string(&template).unwrap();
    let new_config = format!(
        r#"
# Do not edit this file. It is automatically generated from the ./.github/dependabot.template.yml file.
# Please add your updates to that file instead.
{}
"#,
        new_config
    );
    Ok(new_config)
}

fn get_updates(pattern: &str) -> Vec<String> {
    let Ok(paths) = glob(pattern) else {
        println!("No pattern found with pattern: '{}'", pattern);
        return Vec::default();
    };
    paths
        .filter_map(|path| match path {
            Ok(path) => {
                let mut dirname = path.to_str().unwrap().to_string();
                if !dirname.starts_with('/') {
                    dirname = "/".to_string() + &dirname;
                }
                let last_slash = dirname.rfind('/').unwrap();
                Some(dirname.chars().take(last_slash + 1).collect())
            }
            Err(e) => {
                println!("{:?}", e);
                None
            }
        })
        .collect()
}
