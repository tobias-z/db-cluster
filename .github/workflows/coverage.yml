on: [pull_request]

name: coverage

jobs:
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup rust
        uses: ./.github/actions/setup-rust

      - uses: taiki-e/install-action@cargo-llvm-cov
      - uses: taiki-e/install-action@nextest

      - name: Generate coverage report
        shell: bash
        run: cargo llvm-cov nextest --workspace --output-path report

      - name: Print generated report
        id: coverage
        run: |
          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo "$(cat report)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send reports to PR comment
        uses: actions/github-script@v6
        env:
          COVERAGE: "${{ steps.coverage.outputs.report }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Coverage Report')
            })
            // 2. Prepare format of the comment
            const output = `
            <details><summary>Coverage Report</summary>
            ---
            ${process.env.COVERAGE}
            ---
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
